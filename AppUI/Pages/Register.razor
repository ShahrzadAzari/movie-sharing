@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using SharedData;


<div class="topnav" id="myTopnav">
  <a href="/">Home</a>
  <a href="/movies">Movies</a>
    <AuthorizeView>
        <Authorized>
        <a href="/you/movies">Your Movies</a>
        <a href="/you/add">Add Movie</a>
        <a href="/logout">Log out</a>
        </Authorized>
        <NotAuthorized>
        <a href="/register" class="active">Sign up</a>
        <a href="/login">Log in</a>
        </NotAuthorized>
    </AuthorizeView>
</div>


<div class="container" style="width: 40%; padding:10px;">
    <div class="card">
      <div class="card-body" style="margin: 20px 20px;">
          <h5 class="card-title" style="margin-bottom: 20px;">Please enter your info:</h5>
            <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (ShowErrors)
                {
                    <div class="alert alert-danger" role="alert">
                        @foreach (var error in Errors)
                        {
                            <p style="margin-bottom: 6px;">@error</p>
                        }
                    </div>
                }
                <div class="form-group row">
                    <label for="firstname" class="col-25">Firstname</label>
                    <div class="col-75">
                        <InputText type="text" class="form-control" @bind-Value="RegisterModel.Firstname"/>
                        <ValidationMessage For="@(() => RegisterModel.Firstname)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="lastname" class="col-25">Lastname</label>
                    <div class="col-75">
                        <InputText type="text" class="form-control" @bind-Value="RegisterModel.Lastname"/>
                        <ValidationMessage For="@(() => RegisterModel.Lastname)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="email" class="col-25">Email address</label>
                    <div class="col-75">
                        <InputText Id="email" class="form-control" @bind-Value="RegisterModel.Email" />
                        <ValidationMessage For="@(() => RegisterModel.Email)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="username" class="col-25">Username</label>
                    <div class="col-75">
                        <InputText type="text" class="form-control" @bind-Value="RegisterModel.Username"/>
                        <ValidationMessage For="@(() => RegisterModel.Username)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="password" class="col-25">Password</label>
                    <div class="col-75">
                        <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.Password" />
                        <ValidationMessage For="@(() => RegisterModel.Password)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="password" class="col-25">Confirm Password</label>
                    <div class="col-75">
                        <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
                        <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
                    </div>
                </div>
                <button type="submit" class="btn btn-primary" style="float: right;"> Submit </button>
            </EditForm>
        </div>
    </div>
</div>


@code {

    private RegisterModel RegisterModel = new RegisterModel();
    private bool ShowErrors;
    private IEnumerable<string> Errors;

    private async Task HandleRegistration()
    {
        ShowErrors = false;

        var result = await AuthService.Register(RegisterModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
        }
    }

}